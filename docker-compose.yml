services:

  # Cloudflare Tunnel
  tunnel:
    image: cloudflare/cloudflared:latest
    restart: always
    command: tunnel --no-autoupdate run
    env_file:
      - docker.env
    networks:
      - internal_network
      - external_network

  # A load balancer to enable non-disruptive replacement of web containers
  lb:
    image: jwilder/nginx-proxy:latest
    restart: always
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./nginx-custom.conf:/etc/nginx/conf.d/nginx-custom.conf:ro
    networks:
      - internal_network

  web:
    image: misskey/misskey:latest
    restart: always
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    #ports: ["3000:3000"]  # enable this if you want to access directly
    networks:
      - internal_network
      - external_network
    volumes:
      - ./misskey-default.yml:/misskey/.config/default.yml:ro
      - /var/misskey/files:/misskey/files
    environment:
      - VIRTUAL_HOST=~^.*$$  # marker for lb
      - VIRTUAL_PORT=3000  # target port for lb

  redis:
    restart: always
    image: redis:7-alpine
    networks:
      - internal_network
    volumes:
      - /var/misskey/redis-data:/data
    healthcheck:
      test: "redis-cli ping"
      interval: 5s
      retries: 20

  db:
    restart: always
    build: 
      context: pg_bigm
    networks:
      - internal_network
    env_file:
      - docker.env
    volumes:
      - ./pg-init.sql:/docker-entrypoint-initdb.d/pg-init.sql:ro
      - /var/misskey/db:/var/lib/postgresql/data
    healthcheck:
      test: "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"
      interval: 5s
      retries: 20

networks:
  internal_network:
    internal: true
  external_network:
